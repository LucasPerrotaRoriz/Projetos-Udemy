****************************************
- Array
Quando utilizar o método unshift pode-se adicionar mais de um elemento e a ordem é preservada.
Exemplo:

dishesToDo.unshift('cereal bowl');
dishesToDo.unshift('spoon');
Adiciona cereal bowl e logo depois spoon que fica na frente dele

dishesToDo.unshift('fork', 'knife');
A ordem é preservado exibindo fork depois knife

Funciona da mesma forma para push.
Exemplo:

dishesToDo.push('cutting board', 'cookie sheet');
São colocados no final do array nessa ordem

****************************************

Método concat junto dois arrays. Não muda o array original.
Exemplo:
let fruits = [ 'apple', 'banana' ];
let veggies = [ 'asparagus', 'brussel sprouts' ];
console.log(fruits.concat(veggies));

Método includes aceita um segundo argumento que é a posição que ele começa a procurar.
indexOf funciona da mesma forma.
Exemplo:
ingredients.includes('water', 3));

****************************************

Método reverse reverte a string.Não cria uma cópia mudando a string original.
Exemplo:

let letters = ['T', 'C', 'E', 'P', 'S', 'E', 'R'];
Resultado ['R', 'E', 'S', 'P', 'E', 'C', 'T']

Método join junta os elementos de um array. Pode ser definido um argumento para servir como divisor como -, . ou até
mais de um como #->.
Exemplo:

console.log(letters.join());
Resultado R,E,S,P,E,C,T

console.log(letters.join('&'));
Resultado R&E&S&P&E&C&T

Os dois métodos podem ser usados juntos (e outros provavelmente também podem).
Exemplo:
console.log(letters.reverse().join('.'));
Resultado R.E.S.P.E.C.T

Tipos diferentes também podem fazer join, transformando-se em uma string.
Exemplo:
let array = [12.3, 60, false];
console.log(array.join(' #-> '));

****************************************

Método slice cópia uma parte e cria um novo. Não modifica o array original. Recebe dois valores
índice inicial e índice final não incluído. Se apenas um valor for incluído vai do índice inicial 
ao fim do array. Um número negativo pode ser utilizado para ir de trás para frente ou dois números
negativos. Usar slice() vazio faz uma cópia do array inteiro.

array(Ind. inicial, Ind. final-1);
array(Ind. inicial);
array(-Ind.negativo);
array(-Ind.negativo, -Ind.negativo);
Exemplo: 
animals = [ 'shark', 'salmon', 'whale', 'bear', 'lizard', 'tortoise' ];
animals.slice(-3, -1)
Resultado  ['bear', 'lizard']

Método splice remove elemetos ou troca elementos ou adiciona novos elementos. Retorna os itens
deletados como array.
//splice(startIdx, deleteCount, itemsToInsert);

Exemplo:
let animals = [ 'shark', 'salmon', 'whale', 'bear', 'lizard', 'tortoise' ];
animals.splice(1, 0, 'octopus');
console.log(animals);
Resultado  ['shark', 'octopus', 'salmon', 'whale', 'bear', 'lizard', 'tortoise']

animals.slice(3, 2);
console.log(animals);
Resultado ['shark', 'octopus', 'salmon', 'orca', 'grizzly']

****************************************

Método sort ordena o array. Com strings funciona bem, porém com números ele converte para 
string gerando resultados estranhos.
Exemplo:
let nums = [ 34, 10, 100000, 67, 99 ];
Resultado [10, 100000, 34, 67, 99]

Por causa disso sort costuma ser usado com método compare.

****************************************
let fruit = 'orange';
let color = fruit;
fruit é orange e color é orange

fruit = 'watermelon';
fruit é watermelon color é orange

Value Types - the variable stores the actual value
Isso vale para tipos primitivos

arrays são dieferentes eles armazem uma referência. 
Exemplo:
array1 = [1,2,3,4,5]
array2 = array1;
console.log(array1, array2); // Eles são iguais

Se mudar o array1 array1.push(10) array2 também muda.

****************************************






















